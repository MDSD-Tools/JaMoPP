package tools.mdsd.jamopp.printer.injection;

import java.util.List;

import org.emftext.language.java.annotations.Annotable;
import org.emftext.language.java.annotations.AnnotationInstance;
import org.emftext.language.java.annotations.AnnotationValue;
import org.emftext.language.java.arrays.ArrayDimension;
import org.emftext.language.java.arrays.ArrayInitializer;
import org.emftext.language.java.arrays.ArrayInstantiation;
import org.emftext.language.java.arrays.ArraySelector;
import org.emftext.language.java.classifiers.Annotation;
import org.emftext.language.java.classifiers.AnonymousClass;
import org.emftext.language.java.classifiers.ConcreteClassifier;
import org.emftext.language.java.classifiers.Enumeration;
import org.emftext.language.java.classifiers.Implementor;
import org.emftext.language.java.classifiers.Interface;
import org.emftext.language.java.containers.CompilationUnit;
import org.emftext.language.java.containers.JavaRoot;
import org.emftext.language.java.expressions.AdditiveExpression;
import org.emftext.language.java.expressions.AdditiveExpressionChild;
import org.emftext.language.java.expressions.AndExpression;
import org.emftext.language.java.expressions.AndExpressionChild;
import org.emftext.language.java.expressions.AssignmentExpression;
import org.emftext.language.java.expressions.AssignmentExpressionChild;
import org.emftext.language.java.expressions.CastExpression;
import org.emftext.language.java.expressions.ConditionalAndExpression;
import org.emftext.language.java.expressions.ConditionalAndExpressionChild;
import org.emftext.language.java.expressions.ConditionalExpression;
import org.emftext.language.java.expressions.ConditionalExpressionChild;
import org.emftext.language.java.expressions.ConditionalOrExpression;
import org.emftext.language.java.expressions.ConditionalOrExpressionChild;
import org.emftext.language.java.expressions.EqualityExpression;
import org.emftext.language.java.expressions.EqualityExpressionChild;
import org.emftext.language.java.expressions.ExclusiveOrExpression;
import org.emftext.language.java.expressions.ExclusiveOrExpressionChild;
import org.emftext.language.java.expressions.Expression;
import org.emftext.language.java.expressions.InclusiveOrExpression;
import org.emftext.language.java.expressions.InclusiveOrExpressionChild;
import org.emftext.language.java.expressions.InstanceOfExpression;
import org.emftext.language.java.expressions.InstanceOfExpressionChild;
import org.emftext.language.java.expressions.LambdaExpression;
import org.emftext.language.java.expressions.LambdaParameters;
import org.emftext.language.java.expressions.MethodReferenceExpression;
import org.emftext.language.java.expressions.MethodReferenceExpressionChild;
import org.emftext.language.java.expressions.MultiplicativeExpression;
import org.emftext.language.java.expressions.MultiplicativeExpressionChild;
import org.emftext.language.java.expressions.NestedExpression;
import org.emftext.language.java.expressions.PrefixUnaryModificationExpression;
import org.emftext.language.java.expressions.RelationExpression;
import org.emftext.language.java.expressions.RelationExpressionChild;
import org.emftext.language.java.expressions.ShiftExpression;
import org.emftext.language.java.expressions.ShiftExpressionChild;
import org.emftext.language.java.expressions.SuffixUnaryModificationExpression;
import org.emftext.language.java.expressions.UnaryExpression;
import org.emftext.language.java.expressions.UnaryExpressionChild;
import org.emftext.language.java.expressions.UnaryModificationExpressionChild;
import org.emftext.language.java.generics.CallTypeArgumentable;
import org.emftext.language.java.generics.TypeArgument;
import org.emftext.language.java.generics.TypeArgumentable;
import org.emftext.language.java.generics.TypeParameter;
import org.emftext.language.java.generics.TypeParametrizable;
import org.emftext.language.java.imports.Import;
import org.emftext.language.java.imports.ImportingElement;
import org.emftext.language.java.instantiations.Instantiation;
import org.emftext.language.java.literals.Literal;
import org.emftext.language.java.literals.Self;
import org.emftext.language.java.members.AdditionalField;
import org.emftext.language.java.members.ClassMethod;
import org.emftext.language.java.members.Constructor;
import org.emftext.language.java.members.EnumConstant;
import org.emftext.language.java.members.ExceptionThrower;
import org.emftext.language.java.members.Field;
import org.emftext.language.java.members.InterfaceMethod;
import org.emftext.language.java.members.Member;
import org.emftext.language.java.members.MemberContainer;
import org.emftext.language.java.modifiers.AnnotableAndModifiable;
import org.emftext.language.java.modifiers.AnnotationInstanceOrModifier;
import org.emftext.language.java.modifiers.Modifier;
import org.emftext.language.java.modules.AccessProvidingModuleDirective;
import org.emftext.language.java.modules.ExportsModuleDirective;
import org.emftext.language.java.modules.OpensModuleDirective;
import org.emftext.language.java.modules.ProvidesModuleDirective;
import org.emftext.language.java.modules.RequiresModuleDirective;
import org.emftext.language.java.modules.UsesModuleDirective;
import org.emftext.language.java.operators.AdditiveOperator;
import org.emftext.language.java.operators.AssignmentOperator;
import org.emftext.language.java.operators.EqualityOperator;
import org.emftext.language.java.operators.MultiplicativeOperator;
import org.emftext.language.java.operators.RelationOperator;
import org.emftext.language.java.operators.ShiftOperator;
import org.emftext.language.java.operators.UnaryModificationOperator;
import org.emftext.language.java.operators.UnaryOperator;
import org.emftext.language.java.parameters.CatchParameter;
import org.emftext.language.java.parameters.OrdinaryParameter;
import org.emftext.language.java.parameters.Parametrizable;
import org.emftext.language.java.parameters.ReceiverParameter;
import org.emftext.language.java.parameters.VariableLengthParameter;
import org.emftext.language.java.references.Argumentable;
import org.emftext.language.java.references.ElementReference;
import org.emftext.language.java.references.IdentifierReference;
import org.emftext.language.java.references.MethodCall;
import org.emftext.language.java.references.PrimitiveTypeReference;
import org.emftext.language.java.references.Reference;
import org.emftext.language.java.references.SelfReference;
import org.emftext.language.java.references.StringReference;
import org.emftext.language.java.references.TextBlockReference;
import org.emftext.language.java.statements.Assert;
import org.emftext.language.java.statements.Block;
import org.emftext.language.java.statements.Break;
import org.emftext.language.java.statements.CatchBlock;
import org.emftext.language.java.statements.Condition;
import org.emftext.language.java.statements.Continue;
import org.emftext.language.java.statements.DefaultSwitchCase;
import org.emftext.language.java.statements.DefaultSwitchRule;
import org.emftext.language.java.statements.DoWhileLoop;
import org.emftext.language.java.statements.ExpressionStatement;
import org.emftext.language.java.statements.ForEachLoop;
import org.emftext.language.java.statements.ForLoop;
import org.emftext.language.java.statements.ForLoopInitializer;
import org.emftext.language.java.statements.JumpLabel;
import org.emftext.language.java.statements.LocalVariableStatement;
import org.emftext.language.java.statements.NormalSwitchCase;
import org.emftext.language.java.statements.NormalSwitchRule;
import org.emftext.language.java.statements.Return;
import org.emftext.language.java.statements.Statement;
import org.emftext.language.java.statements.Switch;
import org.emftext.language.java.statements.SwitchCase;
import org.emftext.language.java.statements.SynchronizedBlock;
import org.emftext.language.java.statements.Throw;
import org.emftext.language.java.statements.TryBlock;
import org.emftext.language.java.statements.WhileLoop;
import org.emftext.language.java.statements.YieldStatement;
import org.emftext.language.java.types.ClassifierReference;
import org.emftext.language.java.types.NamespaceClassifierReference;
import org.emftext.language.java.types.PrimitiveType;
import org.emftext.language.java.types.TypeReference;
import org.emftext.language.java.variables.AdditionalLocalVariable;
import org.emftext.language.java.variables.LocalVariable;
import org.emftext.language.java.variables.Resource;

import com.google.inject.AbstractModule;
import com.google.inject.Singleton;
import com.google.inject.TypeLiteral;
import com.google.inject.name.Names;

import tools.mdsd.jamopp.printer.implementation.*;
import tools.mdsd.jamopp.printer.interfaces.EmptyPrinter;
import tools.mdsd.jamopp.printer.interfaces.Printer;

public class ModulePrinterInjection extends AbstractModule {

	@Override
	protected void configure() {
		super.configure();

		binder().disableCircularProxies();

		bind(new TypeLiteral<Printer<AdditionalField>>(){}).to(AdditionalFieldPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AdditionalLocalVariable>>(){}).to(AdditionalLocalVariablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AdditiveExpressionChild>>(){}).to(AdditiveExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AdditiveExpression>>(){}).to(AdditiveExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AdditiveOperator>>(){}).to(AdditiveOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AndExpressionChild>>(){}).to(AndExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AndExpression>>(){}).to(AndExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AnnotableAndModifiable>>(){}).to(AnnotableAndModifiablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Annotable>>(){}).to(AnnotablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AnnotationInstanceOrModifier>>(){}).to(AnnotationInstanceOrModifierPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AnnotationInstance>>(){}).to(AnnotationInstancePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Annotation>>(){}).to(AnnotationPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AnnotationValue>>(){}).to(AnnotationValuePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AnonymousClass>>(){}).to(AnonymousClassPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Argumentable>>(){}).to(ArgumentablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<List<ArrayDimension>>>(){}).to(ArrayDimensionsPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ArrayInitializer>>(){}).to(ArrayInitializerPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ArrayInstantiation>>(){}).to(ArrayInstantiationPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ArraySelector>>(){}).to(ArraySelectorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Assert>>(){}).to(AssertPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AssignmentExpressionChild>>(){}).to(AssignmentExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AssignmentExpression>>(){}).to(AssignmentExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AssignmentOperator>>(){}).to(AssignmentOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Block>>(){}).to(BlockPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Break>>(){}).to(BreakPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<CallTypeArgumentable>>(){}).to(CallTypeArgumentablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<CastExpression>>(){}).to(CastExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<CatchBlock>>(){}).to(CatchBlockPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<CatchParameter>>(){}).to(CatchParameterPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ClassifierReference>>(){}).to(ClassifierReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ClassMethod>>(){}).to(ClassMethodPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<org.emftext.language.java.classifiers.Class>>(){}).to(ClassPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<CompilationUnit>>(){}).to(CompilationUnitPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConcreteClassifier>>(){}).to(ConcreteClassifierPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalAndExpressionChild>>(){}).to(ConditionalAndExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalAndExpression>>(){}).to(ConditionalAndExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalExpressionChild>>(){}).to(ConditionalExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalExpression>>(){}).to(ConditionalExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalOrExpressionChild>>(){}).to(ConditionalOrExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalOrExpression>>(){}).to(ConditionalOrExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Condition>>(){}).to(ConditionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Constructor>>(){}).to(ConstructorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Continue>>(){}).to(ContinuePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<DefaultSwitchCase>>(){}).to(DefaultSwitchCasePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<DefaultSwitchRule>>(){}).to(DefaultSwitchRulePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<DoWhileLoop>>(){}).to(DoWhileLoopPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ElementReference>>(){}).to(ElementReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<EnumConstant>>(){}).to(EnumConstantPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Enumeration>>(){}).to(EnumerationPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<EqualityExpressionChild>>(){}).to(EqualityExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<EqualityExpression>>(){}).to(EqualityExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<EqualityOperator>>(){}).to(EqualityOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ExceptionThrower>>(){}).to(ExceptionThrowerPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ExclusiveOrExpressionChild>>(){}).to(ExclusiveOrExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ExclusiveOrExpression>>(){}).to(ExclusiveOrExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ExportsModuleDirective>>(){}).to(ExportsModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Expression>>(){}).to(ExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ExpressionStatement>>(){}).to(ExpressionStatementPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Field>>(){}).to(FieldPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ForEachLoop>>(){}).to(ForEachLoopPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ForLoopInitializer>>(){}).to(ForLoopInitializerPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ForLoop>>(){}).to(ForLoopPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<IdentifierReference>>(){}).to(IdentifierReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Implementor>>(){}).to(ImplementorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ImportingElement>>(){}).to(ImportingElementPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Import>>(){}).to(ImportPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<InclusiveOrExpressionChild>>(){}).to(InclusiveOrExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<InclusiveOrExpression>>(){}).to(InclusiveOrExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<InstanceOfExpressionChild>>(){}).to(InstanceOfExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<InstanceOfExpression>>(){}).to(InstanceOfExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Instantiation>>(){}).to(InstantiationPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<InterfaceMethod>>(){}).to(InterfaceMethodPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Interface>>(){}).to(InterfacePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<JavaRoot>>(){}).to(JavaRootPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<JumpLabel>>(){}).to(JumpLabelPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<LambdaExpression>>(){}).to(LambdaExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<LambdaParameters>>(){}).to(LambdaParametersPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Literal>>(){}).to(LiteralPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<LocalVariable>>(){}).to(LocalVariablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<LocalVariableStatement>>(){}).to(LocalVariableStatementPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<MemberContainer>>(){}).to(MemberContainerPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Member>>(){}).to(MemberPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<MethodCall>>(){}).to(MethodCallPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<MethodReferenceExpressionChild>>(){}).to(MethodReferenceExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<MethodReferenceExpression>>(){}).to(MethodReferenceExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Modifier>>(){}).to(ModifierPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<org.emftext.language.java.containers.Module>>(){}).to(ModulePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<MultiplicativeExpressionChild>>(){}).to(MultiplicativeExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<MultiplicativeExpression>>(){}).to(MultiplicativeExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<MultiplicativeOperator>>(){}).to(MultiplicativeOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<NamespaceClassifierReference>>(){}).to(NamespaceClassifierReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<NestedExpression>>(){}).to(NestedExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<NormalSwitchCase>>(){}).to(NormalSwitchCasePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<NormalSwitchRule>>(){}).to(NormalSwitchRulePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<OpensModuleDirective>>(){}).to(OpensModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<OrdinaryParameter>>(){}).to(OrdinaryParameterPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Parametrizable>>(){}).to(ParametrizablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<PrefixUnaryModificationExpression>>(){}).to(PrefixUnaryModificationExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<PrimitiveType>>(){}).to(PrimitiveTypePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<PrimitiveTypeReference>>(){}).to(PrimitiveTypeReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ProvidesModuleDirective>>(){}).to(ProvidesModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ReceiverParameter>>(){}).to(ReceiverParameterPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Reference>>(){}).to(ReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<RelationExpressionChild>>(){}).to(RelationExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<RelationExpression>>(){}).to(RelationExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<RelationOperator>>(){}).to(RelationOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AccessProvidingModuleDirective>>(){}).to(RemainingAccessProvidingModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<RequiresModuleDirective>>(){}).to(RequiresModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Resource>>(){}).to(ResourcePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Return>>(){}).to(ReturnPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Self>>(){}).to(SelfPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<SelfReference>>(){}).to(SelfReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ShiftExpressionChild>>(){}).to(ShiftExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ShiftExpression>>(){}).to(ShiftExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ShiftOperator>>(){}).to(ShiftOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Statement>>(){}).to(StatementPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<StringReference>>(){}).to(StringReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<SuffixUnaryModificationExpression>>(){}).to(SuffixUnaryModificationExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<SwitchCase>>(){}).to(SwitchCasePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Switch>>(){}).to(SwitchPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<SynchronizedBlock>>(){}).to(SynchronizedBlockPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<TextBlockReference>>(){}).to(TextBlockReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Throw>>(){}).to(ThrowPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<TryBlock>>(){}).to(TryBlockPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<TypeArgumentable>>(){}).to(TypeArgumentablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<TypeArgument>>(){}).to(TypeArgumentPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<TypeParameter>>(){}).to(TypeParameterPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<TypeParametrizable>>(){}).to(TypeParametrizablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<TypeReference>>(){}).to(TypeReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<UnaryExpressionChild>>(){}).to(UnaryExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<UnaryExpression>>(){}).to(UnaryExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<UnaryModificationExpressionChild>>(){}).to(UnaryModificationExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<UnaryModificationOperator>>(){}).to(UnaryModificationOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<UnaryOperator>>(){}).to(UnaryOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<UsesModuleDirective>>(){}).to(UsesModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<VariableLengthParameter>>(){}).to(VariableLengthParameterPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<WhileLoop>>(){}).to(WhileLoopPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<YieldStatement>>(){}).to(YieldStatementPrinterImpl.class).in(Singleton.class);

		bind(new TypeLiteral<EmptyPrinter>(){}).annotatedWith(Names.named("ReflectiveClassReferencePrinter")).to(ReflectiveClassReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<EmptyPrinter>(){}).annotatedWith(Names.named("InferableTypePrinter")).to(InferableTypePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<EmptyPrinter>(){}).annotatedWith(Names.named("EmptyMemberPrinter")).to(EmptyMemberPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<EmptyPrinter>(){}).annotatedWith(Names.named("EmptyStatementPrinter")).to(EmptyStatementPrinterImpl.class).in(Singleton.class);
		
		
	}

}
