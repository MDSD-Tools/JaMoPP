package jamopp.printer.injection;

import java.util.List;

import org.emftext.language.java.annotations.Annotable;
import org.emftext.language.java.annotations.AnnotationInstance;
import org.emftext.language.java.annotations.AnnotationValue;
import org.emftext.language.java.arrays.ArrayDimension;
import org.emftext.language.java.arrays.ArrayInitializer;
import org.emftext.language.java.arrays.ArrayInstantiation;
import org.emftext.language.java.arrays.ArraySelector;
import org.emftext.language.java.classifiers.Annotation;
import org.emftext.language.java.classifiers.AnonymousClass;
import org.emftext.language.java.classifiers.ConcreteClassifier;
import org.emftext.language.java.classifiers.Enumeration;
import org.emftext.language.java.containers.CompilationUnit;
import org.emftext.language.java.expressions.AdditiveExpression;
import org.emftext.language.java.expressions.AdditiveExpressionChild;
import org.emftext.language.java.expressions.AndExpression;
import org.emftext.language.java.expressions.AndExpressionChild;
import org.emftext.language.java.expressions.AssignmentExpression;
import org.emftext.language.java.expressions.AssignmentExpressionChild;
import org.emftext.language.java.expressions.CastExpression;
import org.emftext.language.java.expressions.ConditionalAndExpression;
import org.emftext.language.java.expressions.ConditionalAndExpressionChild;
import org.emftext.language.java.expressions.ConditionalExpression;
import org.emftext.language.java.expressions.ConditionalExpressionChild;
import org.emftext.language.java.expressions.ConditionalOrExpression;
import org.emftext.language.java.expressions.ConditionalOrExpressionChild;
import org.emftext.language.java.expressions.EqualityExpression;
import org.emftext.language.java.expressions.EqualityExpressionChild;
import org.emftext.language.java.expressions.ExclusiveOrExpression;
import org.emftext.language.java.expressions.ExclusiveOrExpressionChild;
import org.emftext.language.java.expressions.Expression;
import org.emftext.language.java.generics.CallTypeArgumentable;
import org.emftext.language.java.members.AdditionalField;
import org.emftext.language.java.members.ClassMethod;
import org.emftext.language.java.members.Constructor;
import org.emftext.language.java.members.EnumConstant;
import org.emftext.language.java.members.ExceptionThrower;
import org.emftext.language.java.members.Field;
import org.emftext.language.java.modifiers.AnnotableAndModifiable;
import org.emftext.language.java.modifiers.AnnotationInstanceOrModifier;
import org.emftext.language.java.modules.ExportsModuleDirective;
import org.emftext.language.java.operators.AdditiveOperator;
import org.emftext.language.java.operators.AssignmentOperator;
import org.emftext.language.java.operators.EqualityOperator;
import org.emftext.language.java.parameters.CatchParameter;
import org.emftext.language.java.references.Argumentable;
import org.emftext.language.java.references.ElementReference;
import org.emftext.language.java.references.IdentifierReference;
import org.emftext.language.java.statements.Assert;
import org.emftext.language.java.statements.Block;
import org.emftext.language.java.statements.Break;
import org.emftext.language.java.statements.CatchBlock;
import org.emftext.language.java.statements.Condition;
import org.emftext.language.java.statements.Continue;
import org.emftext.language.java.statements.DefaultSwitchCase;
import org.emftext.language.java.statements.DoWhileLoop;
import org.emftext.language.java.statements.ExpressionStatement;
import org.emftext.language.java.statements.ForEachLoop;
import org.emftext.language.java.statements.ForLoop;
import org.emftext.language.java.statements.ForLoopInitializer;
import org.emftext.language.java.types.ClassifierReference;
import org.emftext.language.java.variables.AdditionalLocalVariable;

import com.google.inject.AbstractModule;
import com.google.inject.Singleton;
import com.google.inject.TypeLiteral;

import jamopp.printer.implementation.*;
import jamopp.printer.interfaces.Printer;
import jamopp.printer.interfaces.printer.DefaultSwitchRulePrinterInt;
import jamopp.printer.interfaces.printer.EmptyMemberPrinterInt;
import jamopp.printer.interfaces.printer.EmptyStatementPrinterInt;
import jamopp.printer.interfaces.printer.ImplementorPrinterInt;
import jamopp.printer.interfaces.printer.ImportPrinterInt;
import jamopp.printer.interfaces.printer.ImportingElementPrinterInt;
import jamopp.printer.interfaces.printer.InclusiveOrExpressionChildPrinterInt;
import jamopp.printer.interfaces.printer.InclusiveOrExpressionPrinterInt;
import jamopp.printer.interfaces.printer.InferableTypePrinterInt;
import jamopp.printer.interfaces.printer.InstanceOfExpressionChildPrinterInt;
import jamopp.printer.interfaces.printer.InstanceOfExpressionPrinterInt;
import jamopp.printer.interfaces.printer.InstantiationPrinterInt;
import jamopp.printer.interfaces.printer.InterfaceMethodPrinterInt;
import jamopp.printer.interfaces.printer.InterfacePrinterInt;
import jamopp.printer.interfaces.printer.JavaRootPrinterInt;
import jamopp.printer.interfaces.printer.JumpLabelPrinterInt;
import jamopp.printer.interfaces.printer.LambdaExpressionPrinterInt;
import jamopp.printer.interfaces.printer.LambdaParametersPrinterInt;
import jamopp.printer.interfaces.printer.LiteralPrinterInt;
import jamopp.printer.interfaces.printer.LocalVariablePrinterInt;
import jamopp.printer.interfaces.printer.LocalVariableStatementPrinterInt;
import jamopp.printer.interfaces.printer.MemberContainerPrinterInt;
import jamopp.printer.interfaces.printer.MemberPrinterInt;
import jamopp.printer.interfaces.printer.MethodCallPrinterInt;
import jamopp.printer.interfaces.printer.MethodReferenceExpressionChildPrinterInt;
import jamopp.printer.interfaces.printer.MethodReferenceExpressionPrinterInt;
import jamopp.printer.interfaces.printer.ModifierPrinterInt;
import jamopp.printer.interfaces.printer.ModulePrinterInt;
import jamopp.printer.interfaces.printer.MultiplicativeExpressionChildPrinterInt;
import jamopp.printer.interfaces.printer.MultiplicativeExpressionPrinterInt;
import jamopp.printer.interfaces.printer.MultiplicativeOperatorPrinterInt;
import jamopp.printer.interfaces.printer.NamespaceClassifierReferencePrinterInt;
import jamopp.printer.interfaces.printer.NestedExpressionPrinterInt;
import jamopp.printer.interfaces.printer.NormalSwitchCasePrinterInt;
import jamopp.printer.interfaces.printer.NormalSwitchRulePrinterInt;
import jamopp.printer.interfaces.printer.OpensModuleDirectivePrinterInt;
import jamopp.printer.interfaces.printer.OrdinaryParameterPrinterInt;
import jamopp.printer.interfaces.printer.ParametrizablePrinterInt;
import jamopp.printer.interfaces.printer.PrefixUnaryModificationExpressionPrinterInt;
import jamopp.printer.interfaces.printer.PrimitiveTypePrinterInt;
import jamopp.printer.interfaces.printer.PrimitiveTypeReferencePrinterInt;
import jamopp.printer.interfaces.printer.ProvidesModuleDirectivePrinterInt;
import jamopp.printer.interfaces.printer.ReceiverParameterPrinterInt;
import jamopp.printer.interfaces.printer.ReferencePrinterInt;
import jamopp.printer.interfaces.printer.ReflectiveClassReferencePrinterInt;
import jamopp.printer.interfaces.printer.RelationExpressionChildPrinterInt;
import jamopp.printer.interfaces.printer.RelationExpressionPrinterInt;
import jamopp.printer.interfaces.printer.RelationOperatorPrinterInt;
import jamopp.printer.interfaces.printer.RemainingAccessProvidingModuleDirectivePrinterInt;
import jamopp.printer.interfaces.printer.RequiresModuleDirectivePrinterInt;
import jamopp.printer.interfaces.printer.ResourcePrinterInt;
import jamopp.printer.interfaces.printer.ReturnPrinterInt;
import jamopp.printer.interfaces.printer.SelfPrinterInt;
import jamopp.printer.interfaces.printer.SelfReferencePrinterInt;
import jamopp.printer.interfaces.printer.ShiftExpressionChildPrinterInt;
import jamopp.printer.interfaces.printer.ShiftExpressionPrinterInt;
import jamopp.printer.interfaces.printer.ShiftOperatorPrinterInt;
import jamopp.printer.interfaces.printer.StatementPrinterInt;
import jamopp.printer.interfaces.printer.StringReferencePrinterInt;
import jamopp.printer.interfaces.printer.SuffixUnaryModificationExpressionPrinterInt;
import jamopp.printer.interfaces.printer.SwitchCasePrinterInt;
import jamopp.printer.interfaces.printer.SwitchPrinterInt;
import jamopp.printer.interfaces.printer.SynchronizedBlockPrinterInt;
import jamopp.printer.interfaces.printer.TextBlockReferencePrinterInt;
import jamopp.printer.interfaces.printer.ThrowPrinterInt;
import jamopp.printer.interfaces.printer.TryBlockPrinterInt;
import jamopp.printer.interfaces.printer.TypeArgumentPrinterInt;
import jamopp.printer.interfaces.printer.TypeArgumentablePrinterInt;
import jamopp.printer.interfaces.printer.TypeParameterPrinterInt;
import jamopp.printer.interfaces.printer.TypeParametrizablePrinterInt;
import jamopp.printer.interfaces.printer.TypeReferencePrinterInt;
import jamopp.printer.interfaces.printer.UnaryExpressionChildPrinterInt;
import jamopp.printer.interfaces.printer.UnaryExpressionPrinterInt;
import jamopp.printer.interfaces.printer.UnaryModificationExpressionChildPrinterInt;
import jamopp.printer.interfaces.printer.UnaryModificationOperatorPrinterInt;
import jamopp.printer.interfaces.printer.UnaryOperatorPrinterInt;
import jamopp.printer.interfaces.printer.UsesModuleDirectivePrinterInt;
import jamopp.printer.interfaces.printer.VariableLengthParameterPrinterInt;
import jamopp.printer.interfaces.printer.WhileLoopPrinterInt;
import jamopp.printer.interfaces.printer.YieldStatementPrinterInt;

public class ModulePrinterInjection extends AbstractModule {

	@Override
	protected void configure() {
		super.configure();

		binder().disableCircularProxies();

		bind(new TypeLiteral<Printer<AdditionalField>>(){}).to(AdditionalFieldPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AdditionalLocalVariable>>(){}).to(AdditionalLocalVariablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AdditiveExpressionChild>>(){}).to(AdditiveExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AdditiveExpression>>(){}).to(AdditiveExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AdditiveOperator>>(){}).to(AdditiveOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AndExpressionChild>>(){}).to(AndExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AndExpression>>(){}).to(AndExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AnnotableAndModifiable>>(){}).to(AnnotableAndModifiablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Annotable>>(){}).to(AnnotablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AnnotationInstanceOrModifier>>(){}).to(AnnotationInstanceOrModifierPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AnnotationInstance>>(){}).to(AnnotationInstancePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Annotation>>(){}).to(AnnotationPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AnnotationValue>>(){}).to(AnnotationValuePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AnonymousClass>>(){}).to(AnonymousClassPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Argumentable>>(){}).to(ArgumentablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<List<ArrayDimension>>>(){}).to(ArrayDimensionsPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ArrayInitializer>>(){}).to(ArrayInitializerPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ArrayInstantiation>>(){}).to(ArrayInstantiationPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ArraySelector>>(){}).to(ArraySelectorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Assert>>(){}).to(AssertPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AssignmentExpressionChild>>(){}).to(AssignmentExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AssignmentExpression>>(){}).to(AssignmentExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<AssignmentOperator>>(){}).to(AssignmentOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Block>>(){}).to(BlockPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Break>>(){}).to(BreakPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<CallTypeArgumentable>>(){}).to(CallTypeArgumentablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<CastExpression>>(){}).to(CastExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<CatchBlock>>(){}).to(CatchBlockPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<CatchParameter>>(){}).to(CatchParameterPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ClassifierReference>>(){}).to(ClassifierReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ClassMethod>>(){}).to(ClassMethodPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<org.emftext.language.java.classifiers.Class>>(){}).to(ClassPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<CompilationUnit>>(){}).to(CompilationUnitPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConcreteClassifier>>(){}).to(ConcreteClassifierPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalAndExpressionChild>>(){}).to(ConditionalAndExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalAndExpression>>(){}).to(ConditionalAndExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalExpressionChild>>(){}).to(ConditionalExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalExpression>>(){}).to(ConditionalExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalOrExpressionChild>>(){}).to(ConditionalOrExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ConditionalOrExpression>>(){}).to(ConditionalOrExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Condition>>(){}).to(ConditionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Constructor>>(){}).to(ConstructorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Continue>>(){}).to(ContinuePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<DefaultSwitchCase>>(){}).to(DefaultSwitchCasePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<DefaultSwitchRulePrinterInt>(){}).to(DefaultSwitchRulePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<DoWhileLoop>>(){}).to(DoWhileLoopPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ElementReference>>(){}).to(ElementReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<EmptyMemberPrinterInt>(){}).to(EmptyMemberPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<EmptyStatementPrinterInt>(){}).to(EmptyStatementPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<EnumConstant>>(){}).to(EnumConstantPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Enumeration>>(){}).to(EnumerationPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<EqualityExpressionChild>>(){}).to(EqualityExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<EqualityExpression>>(){}).to(EqualityExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<EqualityOperator>>(){}).to(EqualityOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ExceptionThrower>>(){}).to(ExceptionThrowerPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ExclusiveOrExpressionChild>>(){}).to(ExclusiveOrExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ExclusiveOrExpression>>(){}).to(ExclusiveOrExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ExportsModuleDirective>>(){}).to(ExportsModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Expression>>(){}).to(ExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ExpressionStatement>>(){}).to(ExpressionStatementPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<Field>>(){}).to(FieldPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ForEachLoop>>(){}).to(ForEachLoopPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ForLoopInitializer>>(){}).to(ForLoopInitializerPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<ForLoop>>(){}).to(ForLoopPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<Printer<IdentifierReference>>(){}).to(IdentifierReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ImplementorPrinterInt>(){}).to(ImplementorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ImportingElementPrinterInt>(){}).to(ImportingElementPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ImportPrinterInt>(){}).to(ImportPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<InclusiveOrExpressionChildPrinterInt>(){}).to(InclusiveOrExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<InclusiveOrExpressionPrinterInt>(){}).to(InclusiveOrExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<InferableTypePrinterInt>(){}).to(InferableTypePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<InstanceOfExpressionChildPrinterInt>(){}).to(InstanceOfExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<InstanceOfExpressionPrinterInt>(){}).to(InstanceOfExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<InstantiationPrinterInt>(){}).to(InstantiationPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<InterfaceMethodPrinterInt>(){}).to(InterfaceMethodPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<InterfacePrinterInt>(){}).to(InterfacePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<JavaRootPrinterInt>(){}).to(JavaRootPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<JumpLabelPrinterInt>(){}).to(JumpLabelPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<LambdaExpressionPrinterInt>(){}).to(LambdaExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<LambdaParametersPrinterInt>(){}).to(LambdaParametersPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<LiteralPrinterInt>(){}).to(LiteralPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<LocalVariablePrinterInt>(){}).to(LocalVariablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<LocalVariableStatementPrinterInt>(){}).to(LocalVariableStatementPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<MemberContainerPrinterInt>(){}).to(MemberContainerPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<MemberPrinterInt>(){}).to(MemberPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<MethodCallPrinterInt>(){}).to(MethodCallPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<MethodReferenceExpressionChildPrinterInt>(){}).to(MethodReferenceExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<MethodReferenceExpressionPrinterInt>(){}).to(MethodReferenceExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ModifierPrinterInt>(){}).to(ModifierPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ModulePrinterInt>(){}).to(ModulePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<MultiplicativeExpressionChildPrinterInt>(){}).to(MultiplicativeExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<MultiplicativeExpressionPrinterInt>(){}).to(MultiplicativeExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<MultiplicativeOperatorPrinterInt>(){}).to(MultiplicativeOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<NamespaceClassifierReferencePrinterInt>(){}).to(NamespaceClassifierReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<NestedExpressionPrinterInt>(){}).to(NestedExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<NormalSwitchCasePrinterInt>(){}).to(NormalSwitchCasePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<NormalSwitchRulePrinterInt>(){}).to(NormalSwitchRulePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<OpensModuleDirectivePrinterInt>(){}).to(OpensModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<OrdinaryParameterPrinterInt>(){}).to(OrdinaryParameterPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ParametrizablePrinterInt>(){}).to(ParametrizablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<PrefixUnaryModificationExpressionPrinterInt>(){}).to(PrefixUnaryModificationExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<PrimitiveTypePrinterInt>(){}).to(PrimitiveTypePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<PrimitiveTypeReferencePrinterInt>(){}).to(PrimitiveTypeReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ProvidesModuleDirectivePrinterInt>(){}).to(ProvidesModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ReceiverParameterPrinterInt>(){}).to(ReceiverParameterPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ReferencePrinterInt>(){}).to(ReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ReflectiveClassReferencePrinterInt>(){}).to(ReflectiveClassReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<RelationExpressionChildPrinterInt>(){}).to(RelationExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<RelationExpressionPrinterInt>(){}).to(RelationExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<RelationOperatorPrinterInt>(){}).to(RelationOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<RemainingAccessProvidingModuleDirectivePrinterInt>(){}).to(RemainingAccessProvidingModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<RequiresModuleDirectivePrinterInt>(){}).to(RequiresModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ResourcePrinterInt>(){}).to(ResourcePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ReturnPrinterInt>(){}).to(ReturnPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<SelfPrinterInt>(){}).to(SelfPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<SelfReferencePrinterInt>(){}).to(SelfReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ShiftExpressionChildPrinterInt>(){}).to(ShiftExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ShiftExpressionPrinterInt>(){}).to(ShiftExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ShiftOperatorPrinterInt>(){}).to(ShiftOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<StatementPrinterInt>(){}).to(StatementPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<StringReferencePrinterInt>(){}).to(StringReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<SuffixUnaryModificationExpressionPrinterInt>(){}).to(SuffixUnaryModificationExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<SwitchCasePrinterInt>(){}).to(SwitchCasePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<SwitchPrinterInt>(){}).to(SwitchPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<SynchronizedBlockPrinterInt>(){}).to(SynchronizedBlockPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<TextBlockReferencePrinterInt>(){}).to(TextBlockReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<ThrowPrinterInt>(){}).to(ThrowPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<TryBlockPrinterInt>(){}).to(TryBlockPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<TypeArgumentablePrinterInt>(){}).to(TypeArgumentablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<TypeArgumentPrinterInt>(){}).to(TypeArgumentPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<TypeParameterPrinterInt>(){}).to(TypeParameterPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<TypeParametrizablePrinterInt>(){}).to(TypeParametrizablePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<TypeReferencePrinterInt>(){}).to(TypeReferencePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<UnaryExpressionChildPrinterInt>(){}).to(UnaryExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<UnaryExpressionPrinterInt>(){}).to(UnaryExpressionPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<UnaryModificationExpressionChildPrinterInt>(){}).to(UnaryModificationExpressionChildPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<UnaryModificationOperatorPrinterInt>(){}).to(UnaryModificationOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<UnaryOperatorPrinterInt>(){}).to(UnaryOperatorPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<UsesModuleDirectivePrinterInt>(){}).to(UsesModuleDirectivePrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<VariableLengthParameterPrinterInt>(){}).to(VariableLengthParameterPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<WhileLoopPrinterInt>(){}).to(WhileLoopPrinterImpl.class).in(Singleton.class);
		bind(new TypeLiteral<YieldStatementPrinterInt>(){}).to(YieldStatementPrinterImpl.class).in(Singleton.class);

	}

}
