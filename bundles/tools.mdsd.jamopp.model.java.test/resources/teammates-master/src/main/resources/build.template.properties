#-----------------------------------------------------------------------------
# This file contains some configuration values required to build and run the web API.
# It should be placed in src\main\resources
# Use '\' to escape ':' e.g., http\://google.com
#-----------------------------------------------------------------------------

# This is the application ID of the app.
# For dev server, this could be anything.
# For staging server, this must match the name of your Google Cloud project.
app.id = teammates-john

# This is the deployment region of the app.
# For dev server, this could be anything.
# For staging/production server, this must match the region of your GAE application.
app.region=us-central1

# This is the version number of the app.
# Use dashes instead of dots because GAE does not allow dots in version number.
# e.g. app.version = 8-0-0
app.version = 8-0-0

# This is the URL for the front-end dev server.
# This should be used only during development mode where the dev server needs to be whitelisted for CORS.
app.frontenddev.url=http\://localhost:4200

# This is the port to connect with local Datastore emulator.
app.localdatastore.port = 8484

# This indicates whether task queues are active (e.g. items added to task queue will be queued for execution).
# This flag is only used during development mode; in production, task queue will always be active.
# In addition, during development mode, there is no "queueing", i.e. all tasks will be immediately executed.
app.taskqueue.active=true

# This is the Google Cloud Storage bucket name used by the app for production purposes, e.g. user profile pictures.
# For dev server, any name will do.
# For staging server, if you use the default bucket for your project, it should be <your app id>.appspot.com
# e.g. app.production.gcs.bucketname = teammates-john.appspot.com
# Otherwise, use the custom bucket name.
# e.g. app.production.gcs.bucketname = teammates-john-custom-bucket
app.production.gcs.bucketname=teammates-john.appspot.com

# This is the Google Cloud Storage bucket name used by the app for data backup purpose.
# It may or may not be the same bucket as the one used in production usage.
# This has no use in dev server.
app.backup.gcs.bucketname=teammates-john-backup

# This flag sets whether a weekly Datastore backup will be performed.
# It does not have any effect in dev server.
app.enable.datastore.backup=false

# This flag sets whether the server is in maintenance mode.
# Under maintenance mode, all API requests will return a 503 error.
app.maintenance=false

# This is the key used to bypass origin check for web API endpoints.
# It can be any random string you choose.
# Make sure that this key is secure.
# e.g. app.csrf.key=lsfdieafoereojfe
app.csrf.key=samplekey

# This is the key used to bypass access control check for web API endpoints.
# It can be any random string you choose.
# Make sure that this key is secure.
# e.g. app.backdoor.key=lsfdieafoereojfe
app.backdoor.key=samplekey

# This is the encryption key used for encryption
# It should be a base 16 string and a multiple of 16 bytes (at least 32 chars)
# e.g."1234567890abc123456789abc1234567"
app.encryption.key=5360b12f6a07af7be93437d215f72fca

# This indicates whether dev server login is enabled.
# This flag is mostly used during development mode; in production, this flag will be used on top of automated environment detection.
app.enable.devserver.login=true

# The following values are configuration for OAuth2 client which is used for authenticating user.
# For dev server, these values will not be used.
# For staging server, they should be the values of one of OAuth 2.0 Client IDs configured in GCP Credentials API.
app.oauth2.client.id=
app.oauth2.client.secret=

# This is the secret key for communication between the site and reCAPTCHA.
# You can get a pair of keys from the Google reCAPTCHA website.
# e.g. "6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe" is a secret key for test environments.
app.captcha.secretkey =

# This is the list of Google ID of users who have access to admin features of the system.
# This is not necessarily the same as admin roles defined in Google Cloud IAM.
# Separate with commas for multiple values with no leading/trailing spaces.
app.admins=app_admin

# This is the list of Google ID of users who have access to maintainer features of the system.
# Separate with commas for multiple values with no leading/trailing spaces.
app.maintainers=app_maintainer

# This is the email address to report runtime error not handled
#   by the system, i.e. AssertionFailure and other unchecked exceptions.
# This should be an email you check. e.g., email of the app admin.
app.crashreport.email = app_admin@gmail.com

# This is the sender email for all emails sent by the system.
app.email.senderemail = teammates@comp.nus.edu.sg

# This is the sender name for all emails sent by the system.
# There is no need to surround with quotes if the name has more than one word.
app.email.sendername = TEAMMATES Admin

# This is the reply-to address for all emails sent by the system.
app.email.replyto = teammates@comp.nus.edu.sg

# This is the service used to send emails.
# Acceptable values are sendgrid, mailgun, mailjet.
# Remember to fill the configuration values (e.g username, password) for the chosen service.
# Empty email service (i.e. no emails will be sent) will be used as the default service if either:
# 1. This field is blank or filled with an unacceptable value
# 2. An acceptable value is used but the configuration is not complete
app.email.service =

# Sendgrid API key for sending emails
app.sendgrid.apikey =

# Mailgun API key for sending emails
app.mailgun.apikey =

# Mailgun domain name for sending emails
app.mailgun.domainname =

# Mailjet API key for sending emails
app.mailjet.apikey =

# Mailjet secret key for sending emails
app.mailjet.secretkey =

# This is the host URL for the full-text search service used by the system.
app.search.service.host=http\://localhost\:8983/solr
